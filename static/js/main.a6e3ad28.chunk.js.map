{"version":3,"sources":["components/Card.js","components/MouseTracker.js","components/CardList.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","React","Component","robot","className","alt","src","username","name","email","CardList","robots","filteredRobots","searchItems","map","item","key","id","SearchBox","searchChange","type","placeholder","onChange","App","this","props","onRequestRobots","process","searchField","onSearchChange","data","error","isPending","filter","toLowerCase","includes","message","href","width","viewBox","fill","d","connect","state","searchRobots","requestApiData","dispatch","event","payload","target","value","url","fetch","then","res","json","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSeatch","initialStateApiData","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6e3ad28.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({robot}) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img alt=\"Robot\" src={`https://robohash.org/${robot.username}?200x200`} />\r\n            <h2>{robot.name}</h2>\r\n            <h3>{robot.email}</h3>\r\n        </div>\r\n        )\r\n    }\r\nexport default Card;","import React from 'react';\r\n\r\nexport default class MouseTracker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.state = { x: 0, y: 0 };\r\n    }\r\n\r\n    handleMouseMove(event) {\r\n        this.setState({\r\n        x: event.clientX,\r\n        y: event.clientY\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\r\n            <h1>Move the mouse around!</h1>\r\n            <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots, searchItems}) => {\r\n\r\n    let filteredRobots = robots.map((item) => (<Card robot={ item } key={item.id} />));\r\n    return (<\r\n            div className=\"cardlist\">\r\n                {[ filteredRobots ]}\r\n            </div>\r\n            );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange}) => {\r\n    return (\r\n        <div className=\"searchbox\">\r\n            <input type=\"text\" className=\"input\" placeholder=\"Search...\"  onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {CardList, SearchBox} from '../components';\r\nimport '../css/main.css';\r\nimport { setSearchField, requestApiData } from '../actions';\r\n\r\nconst mapStateToProps = state =>  { \r\n  return { \r\n    searchField: state.searchRobots.searchField,\r\n    data : state.requestApiData.data,\r\n    isPending: state.requestApiData.isPending,\r\n    error: state.requestApiData.error\r\n  }\r\n};\r\n\r\nconst mapDispatch = dispatch =>  { \r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)) ,\r\n    onRequestRobots: url => dispatch(requestApiData(url))\r\n  } \r\n};\r\n\r\nclass App extends React.Component {\r\n  \r\n    componentDidMount() {\r\n      this.props.onRequestRobots(process.env.REACT_APP_JSON_PLACEHOLDER_URL);\r\n    }\r\n  \r\n    render() {\r\n      const { searchField, onSearchChange, data, error, isPending} = this.props;  \r\n      const filteredRobots = data.filter( robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n      })\r\n      if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n      } else if (isPending) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n          <div className=\"container-fluid\">\r\n            <header className=\"header\"><h1>ROBOLIST</h1></header>\r\n            <SearchBox searchChange={onSearchChange} />\r\n                <CardList robots={ filteredRobots } />\r\n            <hr />\r\n            <footer className=\"footer\">\r\n              <a href={`https://www.linkedin.com/in/${ process.env.REACT_APP_LINKEDIN_USERNAME }`}>\r\n                <span className=\"icon  icon-linkedin\">\r\n                  <svg width=\"20px\" viewBox=\"0 50 512 512\" >\r\n                    <path fill=\"#828282\" d=\"M150.65,100.682c0,27.992-22.508,50.683-50.273,50.683c-27.765,0-50.273-22.691-50.273-50.683\r\n                    C50.104,72.691,72.612,50,100.377,50C128.143,50,150.65,72.691,150.65,100.682z M143.294,187.333H58.277V462h85.017V187.333z\r\n                    M279.195,187.333h-81.541V462h81.541c0,0,0-101.877,0-144.181c0-38.624,17.779-61.615,51.807-61.615\r\n                    c31.268,0,46.289,22.071,46.289,61.615c0,39.545,0,144.181,0,144.181h84.605c0,0,0-100.344,0-173.915\r\n                    s-41.689-109.131-99.934-109.131s-82.768,45.369-82.768,45.369V187.333z\"/>\r\n                  </svg>\r\n                </span>\r\n              </a>\r\n              <p>Costin Catescu Â© 2020</p>\r\n            </footer>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatch)(App);\r\n","import {    CHANGE_SEARCH_FIELD, \r\n            REQUEST_API_DATA_PENDING,\r\n            REQUEST_API_DATA_SUCCESS,\r\n            REQUEST_API_DATA_FAILED,\r\n\r\n        } from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type : CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestApiData = (url) => (dispatch) => {\r\n    dispatch({ type : REQUEST_API_DATA_PENDING});\r\n    fetch(url)\r\n        .then(res => res.json())\r\n        .then( data => dispatch({ type: REQUEST_API_DATA_SUCCESS, payload: data }))\r\n        .catch( error => dispatch({ type : REQUEST_API_DATA_FAILED,payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\"\r\nexport const CHANGE_ERROR_STATUS = \"CHANGE_ERROR_STATUS\"\r\n\r\nexport const REQUEST_API_DATA_PENDING = \"REQUEST_API_DATA_PENDING\"\r\nexport const REQUEST_API_DATA_SUCCESS = \"REQUEST_API_DATA_SUCCESS\"\r\nexport const REQUEST_API_DATA_FAILED  = \"REQUEST_API_DATA_FAILED\"\r\n\r\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {    CHANGE_SEARCH_FIELD, \r\n    REQUEST_API_DATA_FAILED,\r\n    REQUEST_API_DATA_PENDING,\r\n    REQUEST_API_DATA_SUCCESS,\r\n\r\n} from './constants';\r\n\r\nconst initialStateSeatch = {\r\n    searchField : \"\", \r\n}\r\n\r\nconst initialStateApiData = { \r\n    error: false,\r\n    isPending: false,\r\n    data: []\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSeatch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD :\r\n            return Object.assign({}, state,{searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const requestApiData = (state=initialStateApiData, action={}) => {  \r\n    switch(action.type) {\r\n        case REQUEST_API_DATA_PENDING : \r\n            return Object.assign({}, state,{isPending: true})\r\n        case REQUEST_API_DATA_SUCCESS :\r\n            return Object.assign({}, state,{data: action.payload, isPending:false})\r\n        case REQUEST_API_DATA_FAILED :\r\n            return Object.assign({}, state, {isPending:false, error:action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider} from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport {App} from './containers';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestApiData } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers( {searchRobots, requestApiData});\r\nconst store = createStore(rootReducer, \r\n    \r\n    applyMiddleware(thunkMiddleware, logger)\r\n  \r\n  ) \r\n  \r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}