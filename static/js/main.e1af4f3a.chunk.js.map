{"version":3,"sources":["components/Card.js","components/MouseTracker.js","components/Scroller.js","components/CardList.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","React","Component","robot","className","alt","src","username","name","email","Scroller","props","children","CardList","robots","filteredRobots","searchItems","map","item","key","id","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","query","target","value","state","error","isLoaded","items","fetch","process","then","res","json","result","this","filter","toLowerCase","includes","message","class","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","intro","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"8MAYeA,GCV2BC,IAAMC,UDAnC,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAEX,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,SAAhC,cACpB,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,UEERC,EARE,SAACC,GAEd,OAAQ,yBAAKP,UAAU,YACVO,EAAMC,WCQRC,EAVE,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,OAEXC,GAFoC,EAAjBC,YAEFF,EAAOG,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAMf,MAAQe,EAAOC,IAAKD,EAAKE,SAC1E,OAAQ,yBACIhB,UAAU,YACT,CAAEW,KCEJM,EARE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACf,OACI,yBAAKlB,UAAU,aACX,2BAAOmB,KAAK,OAAOnB,UAAU,QAAQoB,YAAY,YAAaC,SAAUH,MC4DnEI,G,wDA5Db,aAAe,IAAD,8BACZ,gBASFC,eAAiB,SAACC,GACd,EAAKC,SAAS,CACVC,MAAOF,EAAMG,OAAOC,SAV1B,EAAKC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,GACPN,MAAQ,IANE,E,gEAgBO,IAAD,OAClBO,MAAMC,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKb,SAAS,CACZM,UAAU,EACVC,MAAOM,OAGX,SAACR,GACC,EAAKL,SAAS,CACZM,UAAU,EACVD,e,+BAMA,IAAD,OAEDnB,EAAiB4B,KAAKV,MAAMG,MAAMQ,QAAQ,SAAAzC,GAC9C,OAAOA,EAAMK,KAAKqC,cAAcC,SAAS,EAAKb,MAAMH,MAAMe,kBAHrD,EAKqBF,KAAKV,MAAzBC,EALD,EAKCA,MAAOC,EALR,EAKQA,SACf,OAAID,EACK,uCAAaA,EAAMa,SAChBZ,EAGF,yBAAKa,MAAM,mBACP,4BAAQ5C,UAAU,UAAS,yCAC3B,kBAAC,EAAD,CAAWkB,aAAcqB,KAAKhB,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUb,OAASC,KAEvB,6BACA,4BAAQX,UAAU,UAAlB,6BATL,+C,GA7CGH,IAAMC,YCQJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKC,MAAM,uBAEbC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMa,a","file":"static/js/main.e1af4f3a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({robot}) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <img alt=\"Robot\" src={`https://robohash.org/${robot.username}?200x200`} />\r\n            <h2>{robot.name}</h2>\r\n            <h3>{robot.email}</h3>\r\n        </div>\r\n        )\r\n    }\r\nexport default Card;","import React from 'react';\r\n\r\nexport default class MouseTracker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n        this.state = { x: 0, y: 0 };\r\n    }\r\n\r\n    handleMouseMove(event) {\r\n        this.setState({\r\n        x: event.clientX,\r\n        y: event.clientY\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div style={{ height: '100vh' }} onMouseMove={this.handleMouseMove}>\r\n            <h1>Move the mouse around!</h1>\r\n            <p>The current mouse position is ({this.state.x}, {this.state.y})</p>\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Scroller = (props) => {\r\n\r\n    return (<div className=\"scroller\">\r\n                {props.children}\r\n            </div>);\r\n\r\n}\r\n\r\nexport default Scroller;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots, searchItems}) => {\r\n\r\n    let filteredRobots = robots.map((item) => (<Card robot={ item } key={item.id} />));\r\n    return (<\r\n            div className=\"cardlist\">\r\n                {[ filteredRobots ]}\r\n            </div>\r\n            );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange}) => {\r\n    return (\r\n        <div className=\"searchbox\">\r\n            <input type=\"text\" className=\"input\" placeholder=\"Search...\"  onChange={searchChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox; ","import React from 'react';\r\nimport {CardList, Scroller, SearchBox} from '../components';\r\nimport '../css/main.css';\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        error: null,\r\n        isLoaded: false,\r\n        items: [],\r\n        query : ''\r\n      };\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({\r\n            query: event.target.value\r\n        })\r\n    }\r\n  \r\n    componentDidMount() {\r\n      fetch(process.env.REACT_APP_JSON_PLACEHOLDER_URL)\r\n        .then(res => res.json())\r\n        .then(\r\n          (result) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              items: result\r\n            });\r\n          },\r\n          (error) => {\r\n            this.setState({\r\n              isLoaded: true,\r\n              error\r\n            });\r\n          }\r\n        )\r\n    }\r\n  \r\n    render() {\r\n        \r\n      const filteredRobots = this.state.items.filter( robot => {\r\n        return robot.name.toLowerCase().includes(this.state.query.toLowerCase())\r\n      })\r\n      const { error, isLoaded } = this.state;\r\n      if (error) {\r\n        return <div>Error: {error.message}</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (<div class=\"container-fluid\">\r\n                    <header className=\"header\"><h1>ROBOLIST</h1></header>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                    <Scroller > \r\n                        <CardList robots={ filteredRobots } />\r\n                    </Scroller>\r\n                    <hr />\r\n                    <footer className=\"footer\">Costin Catescu Â© 2020</footer>\r\n                </div>\r\n        );\r\n      }\r\n    }\r\n}\r\n\r\n  export default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {App} from './containers';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App intro=\"Welcome to react!\"/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}